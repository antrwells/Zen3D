#define dx 1.0

Texture2D    g_Texture;
SamplerState g_Texture_sampler;
Texture2D g_TextureNorm;
SamplerState g_TextureNorm_sampler;
TextureCube  g_Env;
SamplerState g_Env_sampler;
TextureCube g_Shadow;
SamplerState g_Shadow_sampler;

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float4 Color : COLOR0;
    float3 Norm : NORMAL0;
    float3 Uv : TEX_COORD;
    float3 TLP : NORMAL1;
    float3 TVP : NORMAL2;
    float3 TFP : NORMAL3;
    float3 lPos : POSITION1;
    float3 vPos : POSITION2;
    float3 lightProp : POSITION3;
    float3 fragPos : POSITION4;
    float3 lDiff : POSITION5;
    float3 lSpec : POSITION6;
    float3 localNormal : NORMAL4;
    float4 renderProps : POSITION7;
   // float3 Norm : NORMAL0;x
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

static const float3 sampleOffsetDirections[20] = {
   float3( dx,  dx,  dx), float3( dx, -dx,  dx), float3(-dx, -dx,  dx), float3(-dx,  dx,  dx), 
   float3( dx,  dx, -dx), float3( dx, -dx, -dx), float3(-dx, -dx, -dx), float3(-dx,  dx, -dx),
   float3( dx,  dx,  0), float3( dx, -dx,  0), float3(-dx, -dx,  0), float3(-dx,  dx,  0),
   float3( dx,  0,  dx), float3(-dx,  0,  dx), float3( dx,  0, -dx), float3(-dx,  0, -dx),
   float3( 0,  dx,  dx), float3( 0, -dx,  dx), float3( 0, -dx, -dx), float3( 0,  dx, -dx)
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{

    float4 col = float4(1, 0, 0, 1);
    //float dis = length(PSIn.fragPos - PSIn.lPos);
    float xd = PSIn.lPos.x - PSIn.fragPos.x;
    float yd = PSIn.lPos.y - PSIn.fragPos.y;
    float zd = PSIn.lPos.z - PSIn.fragPos.z;

    float dis = sqrt(xd * xd + yd * yd + zd * zd);

    if (dis < 0) {
        dis = -dis;
    }

   

    float dv = dis / PSIn.lightProp.x;

    if (dv > 1.0) {
        dv = 1.0;
    }
    dv = 1.0 - dv;

    dis = dv;



    float3 tNormal = float3(0.5, 0.0f, 1.0f);

    float2 nv = PSIn.Uv.xy;
    //nv.y = 1.0-nv.y;
                                                                                                                   
    //nv.z = nv.y;


    tNormal = g_TextureNorm.Sample(g_TextureNorm_sampler, nv).rgb;


   // tNormal = tNormal * 2.0 - 1.0;
  


    //tNormal = -tNormal;

    //tNormal = 

    //tNormal.y = -tNormal.y;

    //tNormal = float3(0.5, 0.5, 1.0f);

    tNormal = normalize(tNormal * 2.0 - 1.0);
    tNormal.y = -tNormal.y;

    float3 lightDir = normalize(PSIn.TLP - PSIn.TFP);

    float diff = max(dot(lightDir, tNormal),0.0);

    dis = dis * diff;

    float rp = PSIn.renderProps.x;


    float4 env_col = float4(0, 0, 0, 0);
    if (rp > 0.5)
    {

        env_col = float4(1, 1, 1, 1);

        //vec3 I = normalize(Position - viewPos);
        //vec3 R = reflect(I, normalize(Normal));

        float3 I = PSIn.vPos - PSIn.fragPos;
        float3 R = reflect(-normalize(I), normalize(PSIn.localNormal));

        //R = R + tNormal * 0.008f;

        //float3 FR = R;

        //FR.y = FR.y;


        env_col = g_Env.Sample(g_Env_sampler, R);

        env_col.a = 0;
    }
   //     PSOut.Color =env_col;

    float3 fragToLight = PSIn.fragPos - PSIn.lPos;

    float currentDepth = abs(distance(PSIn.fragPos,PSIn.lPos));

    float shadowVal = 0;
    int samples = 20;
  float diskRadius = 0.005f;
    float bias = 0.005;
    shadowVal = 0;
      currentDepth = currentDepth / PSIn.lightProp.x;
    for(int i=0;i<samples;i++){

    float closestDepth = g_Shadow.Sample(g_Shadow_sampler,normalize(fragToLight)+sampleOffsetDirections[i] * diskRadius).r;
    
    

  

    if( (currentDepth-0.015)>closestDepth)
    {

        shadowVal +=1.0f;
        

    }
    }

    shadowVal = shadowVal / (float)samples;
    shadowVal = 1.0 - shadowVal;

    

    PSOut.Color = ((g_Texture.Sample(g_Texture_sampler, PSIn.Uv) * float4(PSIn.lDiff.x * dis, PSIn.lDiff.y * dis, PSIn.lDiff.z * dis, 1.0)) + env_col)*shadowVal;

    //}
}

//